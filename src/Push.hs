{-# LANGUAGE OverloadedStrings #-}
module Push where

import Control.Applicative
import Network.Wreq
import Data.Aeson
import Data.Aeson.Lens
import Control.Lens hiding ((.=))
import Control.Monad.Reader
import qualified Data.ByteString.Lazy as BS
import qualified Data.ByteString.Char8 as BSC
import qualified Data.Text as T
import qualified Data.Text.IO as TIO
import Database.SQLite.Simple
import Turtle
import Shared

data PushOpts = PushOpts { _issueUser :: T.Text
                         , _issuePswd :: T.Text
                         , _user      :: T.Text
                         , _repo      :: T.Text
                         } deriving (Show, Eq)

type ConfigM = ReaderT (Connection, PushOpts) IO

baseUrl :: String
baseUrl = "https://api.github.com/repos/"

cfgPath :: IsString a => a
cfgPath = ".git/hooks/gitdo.json"

body :: PushOpts -> Todo -> T.Text
body cfg (Todo fp ln _ _ _) = "Autogenerated from [comment](https://github.com/"
                            <> _user cfg <> "/" <> _repo cfg <> "/blob/master/"
                            <> fromRight (toText fp) <> "#L" <> T.pack (show ln)
                            <> ")"

syncIssue :: Todo -> ConfigM ()
syncIssue t@(Todo fp ln td _ n) = do
  let ext = case n of Just v  -> "/" <> show v
                      Nothing -> ""
  (conn, cfg) <- ask
  let opts = defaults & auth ?~ basicAuth (BSC.pack $ T.unpack $ _issueUser cfg)
                                          (BSC.pack $ T.unpack $ _issuePswd cfg)
  let json = object ["title" .= td, "body" .= body cfg t]
  r <- liftIO $ postWith opts (baseUrl
                                <> T.unpack (_user cfg) <> "/"
                                <> T.unpack (_repo cfg) <> "/issues" <> ext)
                              json
  let q = "UPDATE todos SET status=?, number=?" <>
          " WHERE file=? AND line=? AND todo=?;"
      err = "Could not sync with the server. Try again with gitdo push"
  json <- asValue r
  let val = json ^? responseBody
  case val ^. key "number" . asDouble of
    Just n  -> liftIO (execute conn q ("synced" :: T.Text, n, fp, ln, td))
    Nothing -> liftIO $ die err
  liftIO $ TIO.putStrLn (todoMsg "SYNCED" t)

push :: PushOpts -> IO ()
push cfg = do
  conn <- open dbPath
  todos <- query conn "SELECT * FROM todos WHERE status IN (?, ?)"
                      ("new" :: T.Text, "updated" :: T.Text)
  flip runReaderT (conn, cfg) $ mapM_ syncIssue todos
  putStrLn "Done"
